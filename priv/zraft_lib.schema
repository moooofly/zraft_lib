%%-*- mode: erlang -*-

%% @doc Where to emit the default log messages (typically at 'info'
%% severity):
%%     off: disabled
%%    file: the file specified by log.console.file
%% console: to standard output (seen when using `zraft attach-direct`)
%%    both: log.console.file and standard out.
{mapping, "log.console", "lager.handlers", [
  {default, {{console_log_default}} },
  {datatype, {enum, [off, file, console, both]}}
]}.

%% @doc The severity level of the console log, default is 'info'.
{mapping, "log.console.level", "lager.handlers", [
  {default, info},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

%% @doc When 'log.console' is set to 'file' or 'both', the file where
%% console messages will be logged.
{mapping, "log.console.file", "lager.handlers", [
  {default, "$(platform_log_dir)/console.log"},
  {datatype, file}
]}.

%% @doc The file where error messages will be logged.
{mapping, "log.error.file", "lager.handlers", [
  {default, "$(platform_log_dir)/error.log"},
  {datatype, file}
]}.


{translation,
 "lager.handlers",
 fun(Conf) ->
    ErrorHandler = case cuttlefish:conf_get("log.error.file", Conf) of
      undefined -> [];
      ErrorFilename -> [{lager_file_backend, [{file, ErrorFilename},
                                              {level, error},
                                              {size, 10485760},
                                              {date, "$D0"},
                                              {count, 5}]}]
    end,

    ConsoleLogLevel = cuttlefish:conf_get("log.console.level", Conf),
    ConsoleLogFile = cuttlefish:conf_get("log.console.file", Conf),

    ConsoleHandler = {lager_console_backend, ConsoleLogLevel},
    ConsoleFileHandler = {lager_file_backend, [{file, ConsoleLogFile},
                                               {level, ConsoleLogLevel},
                                               {size, 10485760},
                                               {date, "$D0"},
                                               {count, 5}]},

    ConsoleHandlers = case cuttlefish:conf_get("log.console", Conf) of
      off -> [];
      file -> [ConsoleFileHandler];
      console -> [ConsoleHandler];
      both -> [ConsoleHandler, ConsoleFileHandler];
      _ -> []
    end,
    ConsoleHandlers ++ ErrorHandler
  end
}.


%% @doc Whether to enable Erlang's built-in error logger.
{mapping, "sasl", "sasl.sasl_error_logger", [
  {default, off},
  {datatype, flag},
  hidden
]}.

%% @doc Whether to enable the crash log.
{mapping, "log.crash", "lager.crash_log", [
  {default, on},
  {datatype, flag}
]}.

%% @doc If the crash log is enabled, the file where its messages will
%% be written.
{mapping, "log.crash.file", "lager.crash_log", [
  {default, "$(platform_log_dir)/crash.log"},
  {datatype, file}
]}.

{translation,
 "lager.crash_log",
 fun(Conf) ->
     case cuttlefish:conf_get("log.crash", Conf) of
         false -> undefined;
         _ ->
             cuttlefish:conf_get("log.crash.file", Conf, "{{platform_log_dir}}/crash.log")
     end
 end}.

%% @doc Maximum size in bytes of individual messages in the crash log
{mapping, "log.crash.maximum_message_size", "lager.crash_log_msg_size", [
  {default, "64KB"},
  {datatype, bytesize}
]}.

%% @doc Maximum size of the crash log in bytes, before it is rotated
{mapping, "log.crash.size", "lager.crash_log_size", [
  {default, "10MB"},
  {datatype, bytesize}
]}.

%% @doc The schedule on which to rotate the crash log.  For more
%% information see:
%% https://github.com/basho/lager/blob/master/README.md#internal-log-rotation
{mapping, "log.crash.rotation", "lager.crash_log_date", [
  {default, "$D0"}
]}.

%% @doc The number of rotated crash logs to keep. When set to
%% 'current', only the current open log file is kept.
{mapping, "log.crash.rotation.keep", "lager.crash_log_count", [
  {default, 5},
  {datatype, [integer, {atom, current}]},
  {validators, ["rotation_count"]}
]}.

{validator,
 "rotation_count",
 "must be 'current' or a positive integer",
 fun(current) -> true;
    (Int) when is_integer(Int) andalso Int >= 0 -> true;
    (_) -> false
 end}.

{translation,
 "lager.crash_log_count",
 fun(Conf) ->
    case cuttlefish:conf_get("log.crash.rotation.keep", Conf) of
       current -> 0;
       Int -> Int
    end
 end}.

%% @doc Whether to redirect error_logger messages into lager -
%% defaults to true
{mapping, "log.error.redirect", "lager.error_logger_redirect", [
  {default, on},
  {datatype, flag},
  hidden
]}.

%% @doc Maximum number of error_logger messages to handle in a second
{mapping, "log.error.messages_per_second", "lager.error_logger_hwm", [
  {default, 100},
  {datatype, integer},
  hidden
]}.


%% @doc Cookie for distributed node communication.  All nodes in the
%% same cluster should use the same cookie or they will not be able to
%% communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
  {default, "zfat_secret"}
]}.

{mapping, "erlang.process_limit", "vm_args.+P", [
  {datatype, integer},
  {default, 100000000}
]}.

%% override zdbbl from 1mb to 32mb
{mapping, "erlang.distribution_buffer_size", "vm_args.+zdbbl", [
  {default, "32MB"},
  merge
]}.

%% VM scheduler collapse, part 1 of 2
{mapping, "erlang.schedulers.force_wakeup_interval", "vm_args.+sfwi", [
  {default, 500},
  {datatype, integer},
  merge
]}.

%% VM scheduler collapse, part 2 of 2
{mapping, "erlang.schedulers.compaction_of_load", "vm_args.+scl", [
  {default, false},
  merge
]}.


%% @doc erlang vm shutdown_time is useful when running a riak_test devrel
{mapping, "erlang.shutdown_time", "vm_args.-shutdown_time", [
  {default, "10s"},
  {datatype, {duration, ms}}
]}.

%% @doc Election timeout.
{mapping, "zraft.election-timeout", "zraft_lib.election_timeout", [
  {default,"500ms"},
  {datatype, {duration, ms}}
]}.

%% @doc Request timeout. Default is double election timeout.
{mapping, "zraft.request-timeout", "zraft_lib.request_timeout", [
  {datatype, {duration, ms}}
]}.

%% @doc Log entry count before snapshot.
{mapping, "zraft.snapshot-threshold", "zraft_lib.max_log_count", [
  {default,1000},
  {datatype,integer}
]}.

%% @doc Maximum size of raft log file in bytes.
{mapping, "zraft.log-segment-size", "zraft_lib.max_segment_size", [
  {default,10485760},
  {datatype,integer}
]}.

%% @doc Directory to write snapshots.
{mapping, "zraft.raft-snapshot-dir", "zraft_lib.snapshot_dir", [
  {default,"$(platform_data_dir)"},
  {datatype,file}
]}.

%% @doc Directory to write raft log files.
{mapping, "zraft.raft-log-dir", "zraft_lib.log_dir", [
  {default,"$(platform_data_dir)"},
  {datatype,file}
]}.

%% @doc Whether to enable backup snapshot.
{mapping, "zraft.snapshot-backup", "zraft_lib.snapshot_backup", [
  {default, off},
  {datatype, flag}
]}.

%% @doc Address that will be used for snapshot receive.
{mapping, "zraft.snapshot-listen-if", "zraft_lib.snapshot_listener_addr", [
  {default,"0.0.0.0"}
]}.

%% @doc Port that will be used for snapshot receive. Default 0 - any free port.
{mapping, "zraft.snapshot-listen-port", "zraft_lib.snapshot_listener_port", [
  {default,0},
  {datatype,integer}
]}.

%% @doc Platform-specific installation paths (substituted by rebar)
{mapping, "platform_bin_dir", "zraft_lib.platform_bin_dir", [
  {datatype, directory},
  {default, "./bin"}
]}.

%% @see platform_bin_dir
{mapping, "platform_data_dir", "zraft_lib.platform_data_dir", [
  {datatype, directory},
  {default, "./data"}
]}.

%% @see platform_bin_dir
{mapping, "platform_etc_dir", "zraft_lib.platform_etc_dir", [
  {datatype, directory},
  {default, "./etc"}
]}.

%% @see platform_bin_dir
{mapping, "platform_lib_dir", "zraft_lib.platform_lib_dir", [
  {datatype, directory},
  {default, "./lib"}
]}.

%% @see platform_bin_dir
{mapping, "platform_log_dir", "zraft_lib.platform_log_dir", [
  {datatype, directory},
  {default, "./log"}
]}.